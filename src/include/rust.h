/* Generated with cbindgen:0.29.0 */

/* This file is automatically generated by cbindgen. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

extern "C" {
typedef enum ResultCString_Tag {
	Ok,
	Err,
} ResultCString_Tag;

struct ResultCString {
	enum class Tag {
		Ok,
		Err,
	};

	struct Ok_Body {
		char *_0;
	};

	struct Err_Body {
		char *_0;
	};

	Tag tag;
	union {
		Ok_Body ok;
		Err_Body err;
	};
};

/**
 * Renders a Minijinja template from a file or a string with context variables provided as JSON.
 *
 * # Arguments
 * * `template_source` - Either the filename of the template or the template content as a string.
 * * `from_file` - If true, treat `template_source` as a filename, otherwise as template content.
 * * `json_context` - JSON string containing context variables.
 *
 * # Returns
 * * `Ok(String)` containing the rendered template, or `Err(minijinja::Error)` if rendering fails.
 */
struct ResultCString render_template(const char *template_source, uintptr_t template_source_len,
                                     const char *json_context, uintptr_t json_context_len, const char *template_path,
                                     bool autoscape, const char *undefined_behavior, const char **autoescape_on,
                                     size_t autoescape_on_count);

/**
 * Frees the memory allocated for a ResultCString.
 *
 * # Arguments
 * * `result` - The ResultCString to free
 *
 * # Safety
 * This function is unsafe because it takes ownership of raw pointers.
 * The caller must ensure that:
 * - The ResultCString was created by this library
 * - The ResultCString is not used after calling this function
 * - This function is called exactly once for each ResultCString
 */
void free_result_cstring(struct ResultCString result);
}